<?php

namespace AppBundle\Repository;

/**
 * CategoriaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoriaRepository extends \Doctrine\ORM\EntityRepository
{
     public function RicercaSottoCategorie($em,$padre){
        
        
        $query = $em->createQuery(
            'SELECT count(c.id)
            FROM AppBundle:Categoria c
            WHERE c.categoriaPadreId= :str ' 
        )->setParameter('str',$padre);
        
        $nris=$query->getSingleScalarResult();
        if($nris==0){
            return 0;
        
        } else {
            $query = $em->createQuery(
            'SELECT c.nome, c.descrizione, c.id, c.immagine
            FROM AppBundle:Categoria c
            WHERE c.categoriaPadreId= :str ' 
        )->setParameter('str',$padre);
        
        }
        $ris = $query->getResult();
        return $ris;
    }
    
    public function MostraCategorie($em){
        $query = $em->createQuery(
            'SELECT c.nome, c.descrizione, c.id, c.immagine, p.nome as padre
            FROM AppBundle:Categoria c, AppBundle:Categoria p
            WHERE c.categoriaPadreId=p.id ' 
        );
        $ris = $query->getResult();
        return $ris;
    }
    //non usata
    public function MostraMaxiCategorie($em){
        $query =
            'SELECT * 
             FROM categoria 
             ' ;
        
        $stmt = $em->getConnection()->prepare($query);
        $stmt->execute();
        return $stmt->fetchAll();
    }
    
    public function checkInserimento($request){
        $nome=$request->get('nome');
        $descrizione=$request->get('descrizione');
        $file=$request->get('file');
        $padre=$request->get('padre');
        return ($nome && $descrizione && $padre);
    }
    
   public function creaCategoria($em,$categoria){
        $unaCategoria= new \AppBundle\Entity\Categoria();
        $unaCategoria->setNome($categoria['nome']);
        $unaCategoria->setDescrizione($categoria['descrizione']);
        $unaCategoria->setImmagine($categoria['file']);
        $unaCategoria->setCategoriaPadreId($categoria['padre']);
        $em->persist($unaCategoria);
        $em->flush();
        
        return;
   }
   
   public function CreaFigli($padre){
       $figliC= $this->findBy("CategoriaPadre",$padre["id"]);
       if($figliC){
            foreach ($figliC as $x){
                $ris["id"]=$x->getId();
                $ris["nome"]=$x->getNome();
                $ris["descrizione"]=$x->getDescrizione();
                $ris["immagine"]=$x->getImmagine();
                $ris["categoriapadre"]=$x->getCategoriaPadreId();
                $ris["padre"]=$padre;
            }
       } else{
           $ris=FALSE;
       }
       return $ris;
   }
   
   public function CreaAlbero(){
       $treeObject = Doctrine_Core::getTable('Category')->getTree();
       return $treeObject;
   }
   
   public function VisualizzaJsTree($em){
       $query = $em->createQuery( "SELECT c.descrizione,c.id,c.immagine, c.categoriaPadreId as parent_id, c.nome as text FROM AppBundle:Categoria c ");
       $data=$query->getResult();
       
       // Build array of item references:
       foreach($data as $key => &$item) {
          $itemsByReference[$item['id']] = &$item;
          // Children array:
          $itemsByReference[$item['id']]['children'] = array();
          // Empty data class (so that json_encode adds "data: {}" ) 
          $itemsByReference[$item['id']]['data'] = new \stdClass();
       }

       // Set items as children of the relevant parent item.
       foreach($data as $key => &$item)
          if($item['parent_id'] && isset($itemsByReference[$item['parent_id']]))
             $itemsByReference [$item['parent_id']]['children'][] = &$item;

       // Remove items that were added to parents elsewhere:
       foreach($data as $key => &$item) {
          if($item['parent_id'] && isset($itemsByReference[$item['parent_id']]))
             unset($data[$key]);
       }
       return $data;
   }
   
   public function salvaCategoria($em,$request){
       $unaCategoria= new \AppBundle\Entity\Categoria();
       $unaCategoria->setNome($request->get("nome"));
       $unaCategoria->setDescrizione($request->get("descrizione"));
       $unaCategoria->setImmagine($request->get("immagine"));
       $unaCategoria->setCategoriaPadreId($request->get("padre"));
       $em->persist($unaCategoria);
       $em->flush();
       return $unaCategoria;
   }
}
